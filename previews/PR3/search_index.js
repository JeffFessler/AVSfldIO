var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AVSfldIO","category":"page"},{"location":"#AVSfldIO.jl-Documentation","page":"Home","title":"AVSfldIO.jl Documentation","text":"","category":"section"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"File I/O routines for AVS .fld format data files; see (AVSfldIO)","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [AVSfldIO]","category":"page"},{"location":"#AVSfldIO.AVSfldIO","page":"Home","title":"AVSfldIO.AVSfldIO","text":"AVSfldIO\n\nmodule for AVS .fld file IO\n\n\n\n\n\n","category":"module"},{"location":"#AVSfldIO.arg_get","page":"Home","title":"AVSfldIO.arg_get","text":"arg_get(head, name, toint)\n\nParse an argument from header, of the name=value form\n\n\n\n\n\n","category":"function"},{"location":"#AVSfldIO.datatype_fld_to_mat-Tuple{AbstractString}","page":"Home","title":"AVSfldIO.datatype_fld_to_mat","text":"format, endian, bytes = datatype_fld_to_mat(datatype)\n\nDetermine data format from .fld header datatype.\n\n\n\n\n\n","category":"method"},{"location":"#AVSfldIO.fld_header-Tuple{AbstractString}","page":"Home","title":"AVSfldIO.fld_header","text":"head = fld_header(file::String ; dir::String=\"\", chat=false)\n\nRead header data from AVS format .fld file, then close file.\n\nin\n\nfile::String file name, usually ending in .fld\n\noption\n\ndir::String prepend file name with this directory; default \"\"\nchat::Bool verbose? default: false\n\nout\n\nhead::String array of header information\n\n\n\n\n\n","category":"method"},{"location":"#AVSfldIO.fld_open-Tuple{AbstractString}","page":"Home","title":"AVSfldIO.fld_open","text":"head, is_external_file, fid = fld_open(file ; dir::String=\"\", chat=false)\n\nRead header data from AVS format .fld file. Leaves file open for more reading.\n\nin\n\nfile::String file name, usually ending in .fld\n\noption\n\ndir::String prepend file name with this directory; default \"\"\nchat::Bool verbose? default: false\n\nout\n\nhead::String array of header information\nis_external_file::Bool true if AVS external format\nfid::IOstream\n\n\n\n\n\n","category":"method"},{"location":"#AVSfldIO.fld_read-Tuple{AbstractString}","page":"Home","title":"AVSfldIO.fld_read","text":"data = fld_read(file::String ; dir::String=\"\", chat=false)\n\nRead data from AVS format .fld file\n\nin\n\nfile file name, usually ending in .fld\n\noption\n\ndir::String prepend file name with this directory; default \"\"\nchat::Bool verbose?\n\nout\n\ndata Array (1D - 5D) in the data type of the file itself\n\n\n\n\n\n","category":"method"},{"location":"#AVSfldIO.fld_write-Tuple{String, AbstractArray{var\"#s77\", N} where {var\"#s77\"<:Real, N}}","page":"Home","title":"AVSfldIO.fld_write","text":"fld_write(file, data ; kwargs...)\n\nWrite data into AVS format .fld file. See README for file format.\n\nin\n\nfile name of file typically ending in .fld\ndata real data array\n\noption\n\ncheck::Bool         report error if file exists; default true\ndir::String         directory name to prepend file name; default \"\"\nendian::Symbol:lelittle endian (default),:be` big endian\nhead::Array{String} comment information for file header\nraw::Bool           put raw data in name.raw, header in name.fld                       where file = name.fld; default false\n\n\n\n\n\n","category":"method"},{"location":"#AVSfldIO.fld_write_data_fix-Tuple{AbstractArray{BigFloat, N} where N}","page":"Home","title":"AVSfldIO.fld_write_data_fix","text":"data = fld_write_data_fix(data)\n\nConvert data to format suitable for writing to .fld file.\n\n\n\n\n\n","category":"method"},{"location":"#AVSfldIO.load-Tuple{FileIO.File{FileIO.DataFormat{:AVSfld}, Name} where Name}","page":"Home","title":"AVSfldIO.load","text":"data = load(ff::File{format\"AVSfld\"} ; kwargs...)\n\nAVSfld load method\n\n\n\n\n\n","category":"method"},{"location":"#AVSfldIO.save-Tuple{FileIO.File{FileIO.DataFormat{:AVSfld}, Name} where Name, AbstractArray{var\"#s231\", N} where {var\"#s231\"<:Real, N}}","page":"Home","title":"AVSfldIO.save","text":"save(ff::File{format\"AVSfld\"}, data::AbstractArray{<:Real} ; kwargs...)\n\nAVSfld save method\n\n\n\n\n\n","category":"method"},{"location":"#AVSfldIO.string_to_array-Tuple{String}","page":"Home","title":"AVSfldIO.string_to_array","text":"header = string_to_array(header_lines)\n\nConvert long string with embedded newlines into string array.\n\n\n\n\n\n","category":"method"}]
}
